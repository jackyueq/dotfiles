" colorcolumn
highlight MatchParen cterm=bold ctermfg=cyan
highlight PmenuSel  ctermfg=white     ctermbg=Yellow    guifg=white    guibg=grey44

set term=xterm-256color

" enable spell checker
set spell

set mouse=a

" set latest for lightline.vim
set laststatus=2

" set commands
set expandtab
set shiftwidth=2
set softtabstop=2
set number
set tabstop=2
set backspace=indent,eol,start
set autowrite
set colorcolumn=81
" Read external changes
set autoread
" Incremental search
set incsearch
" Ignore cases in search
set ignorecase
set smartcase
" no files
set nobackup
set nowritebackup
" folding
set foldmethod=indent
set foldnestmax=1
" indent
set autoindent
set smartindent

" highlight current line
set cursorline

" Color
colorscheme desert


set tags+=/data00/home/yue.qi/tags

set spellfile+=~/.vim/bundle/vundle/spell/en.utf-8.add

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" http://vim.wikia.com/wiki/Auto_highlight_current_word_when_idle
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

" Change cursor shape in different modes
"if has("autocmd")
"  au InsertEnter * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
"  au InsertLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape block"
"  au VimLeave * silent execute "!gconftool-2 --type string --set /apps/gnome-terminal/profiles/Default/cursor_shape ibeam"
"endif

" Highlight all search patterns
set hlsearch
" Highlight the status line of the active window
hi StatusLine ctermfg=Yellow
" Color popup
"Omni menu colors
hi Pmenu     ctermfg=lightgrey ctermbg=brown     guifg=grey60   guibg=brown

" enable syntax highlight and auto-complete
syntax enable
syntax on             " syntax highlighting

inoremap <leader>. <C-P>

"Edit mapping (make cursor keys work like in Windows: <C-Left><C-Right>
"Move to next word.
nnoremap <C-Left> b
vnoremap <C-S-Left> vb
nnoremap <C-S-Left> gh<C-O>b
inoremap <C-S-Left> <C-\><C-O>gh<C-O>b

nnoremap <C-Right> w
vnoremap <C-S-Right> ve
nnoremap <C-S-Right> gh<C-O>w
inoremap <C-S-Right> <C-\><C-O>gh<C-O>w
" Ctrl-c as copy
vnoremap <C-C> "+y

" Use CTRL-S for saving, also in Insert mode
noremap <C-S> :update<CR>
vnoremap <C-S> <C-C>:update<CR>
inoremap <C-S> <C-O>:update<CR>

" Ctrl+Tab/Shift+Tab for ident
nnoremap <C-Tab> >>_
nnoremap <S-Tab> <<_
inoremap <S-Tab> <C-D>
vnoremap <Tab> >gv
vnoremap <S-Tab> <gv
" Ctrl-Home as top of file
inoremap <C-Home> gg
" Ctrl-End as end of file
inoremap <C-End> G

" Ctrl-S as save, also in Insert mode
noremap <C-S> :write<CR>
vnoremap <C-S> <C-C>:write<CR>
inoremap <C-S> <C-O>:write<CR>

" CTRL-X and SHIFT-Del are Cut
vnoremap <C-X> "+x
vnoremap <S-Del> "+x
" CTRL-C and CTRL-Insert are Copy
vnoremap <C-C> "+y
vnoremap <C-Insert> "+y
" CTRL-V and SHIFT-Insert are Paste
"map <C-V> "+gP
map <S-Insert> "+gP
"cmap <C-V> <C-R>+
cmap <S-Insert> <C-R>+
" Toggle Quickfix Windows
command -bang -nargs=? QFix call QFixToggle(<bang>0)
function! QFixToggle(forced)
if exists("g:qfix_win") && a:forced == 0
cclose
unlet g:qfix_win
else
copen 10
let g:qfix_win = bufnr("$")
let g:go_version_warning = 0
endif
endfunction
nnoremap <leader>q :QFix<CR>

" TagList options
let Tlist_Close_On_Select = 1 "close taglist window once we selected something
let Tlist_Exit_OnlyWindow = 1 "if taglist window is the only window left, exit vim
let Tlist_Show_Menu = 1 "show Tags menu in gvim
let Tlist_Show_One_File = 1 "show tags of only one file
let Tlist_GainFocus_On_ToggleOpen = 1 "automatically switch to taglist window

let Tlist_Highlight_Tag_On_BufEnter = 1 "highlight current tag in taglist window
let Tlist_Process_File_Always = 1 "even without taglist window, create tags file, required for displaying tag in status line
let Tlist_Use_Right_Window = 1 "display taglist window on the right
let Tlist_Display_Prototype = 1 "display full prototype instead of just function name

" Function keys
" F2 -- Toggle Paste mode
nnoremap <F2> :set invpaste paste?<CR>
set pastetoggle=<F2>
set showmode
" F3 -- Toggle tagbar
"let Tlist_Sort_Type = “name”
nmap <F3> :TagbarToggle<cr>
" F4 -- Toggle NERDtree
nmap <F4> :NERDTreeToggle<cr>
" F6 -- Toggle Taglist prototype
nmap <F6> :TlistShowPrototype

autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
" omnicomplete
let g:AutoComplPop_BehaviorKeywordLength = 0

" YCM
"let g:ycm_autoclose_preview_window_after_completion = 1
" to work together with gitgutter sign column.
"let g:ycm_enable_diagnostic_signs = 0

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
"call plug#begin('~/.vim/plugged')
"" Make sure you use single quotes
"
"" Additional bundles
"Plug 'git://git.wincent.com/command-t.git'
""Plugin 'AutoComplPop'
"Plug 'The-NERD-tree'
"Plug 'majutsushi/tagbar'
"Plug 'flazz/vim-colorschemes'
"Plug 'scrooloose/syntastic'
""Plugin 'ervandew/supertab'
"Plug 'tpope/vim-fugitive'
""Plugin 'octol/vim-cpp-enhanced-highlight'
"Plug 'mru.vim'
"Plug 'tComment'
""Plugin 'airblade/vim-gitgutter'
"Plug 'Townk/vim-autoclose'
"" Initialize plugin system
"call plug#end()


" " Plugins through Vundle
set nocompatible               " be iMproved
filetype off                   " required!
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
"" Additional bundles
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'AutoComplPop'
Plugin 'The-NERD-tree'
Plugin 'majutsushi/tagbar'
Plugin 'flazz/vim-colorschemes'
Plugin 'scrooloose/syntastic'
Plugin 'tpope/vim-fugitive'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'mru.vim'
Plugin 'tComment'
Plugin 'Townk/vim-autoclose'
Plugin 'itchyny/lightline.vim'
Plugin 'solarnz/thrift.vim'
Plugin 'rhysd/vim-clang-format'
Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'

" All of your Plugins must be added before the following line
Plugin 'itchyny/lightline.vim'
Plugin 'solarnz/thrift.vim'
Plugin 'rhysd/vim-clang-format'
Plugin 'godlygeek/tabular'
Plugin 'preservim/vim-markdown'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required



if argc() == 2
  silent all
endif

" For lightline.vim
" if !has('gui_running')
"   set t_Co=256
" endif
set noshowmode

hi clear SpellBad
hi SpellBad cterm=NONE
" Set style for gVim
hi SpellBad gui=undercurl

" no swap
set noswapfile


" mucomplete
set completeopt+=menuone
set completeopt+=noselect
set shortmess+=c   " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion "

" acp
let g:acp_enableAtStartup = 1
let g:acp_behaviorKeywordCommand = "\<C-n>"
